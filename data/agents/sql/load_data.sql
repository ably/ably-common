-- Load data into Snowflake tables
-- This file contains the commands to load and merge data

-- Step 1: Load data into staging tables
-- Option A: Load from internal stage (after uploading files)
COPY INTO AGENTS_STAGING (IDENTIFIER, VERSIONED, TYPE, SOURCE, PRODUCT, NAME)
FROM @AGENT_DATA_STAGE/agents.csv
FILE_FORMAT = CSV_FORMAT;

COPY INTO AGENT_RELEASES_STAGING (
    IDENTIFIER, VERSION, RELEASE_DATE, RELEASE_TYPE, 
    SUPPORT_END_DATE, DEPRECATION_DATE, SUNSET_DATE, SUNSET_REASON,
    LATEST_VERSION, LATEST_VERSION_RELEASE_DATE, 
    RELEASE_INFO_SUMMARY, RELEASE_INFO
)
FROM @AGENT_DATA_STAGE/agent-release-data.csv
FILE_FORMAT = CSV_FORMAT;

-- Option B: Load from external stage (S3, Azure, GCS)
-- Example for S3:
/*
COPY INTO AGENTS_STAGING (IDENTIFIER, VERSIONED, TYPE, SOURCE, PRODUCT, NAME)
FROM 's3://your-bucket/data/agents.csv'
CREDENTIALS = (AWS_KEY_ID='xxx' AWS_SECRET_KEY='xxx')
FILE_FORMAT = CSV_FORMAT;
*/

-- Step 2: Merge staging data into main tables
-- Merge agents data
MERGE INTO AGENTS AS target
USING AGENTS_STAGING AS source
ON target.IDENTIFIER = source.IDENTIFIER
WHEN MATCHED THEN
    UPDATE SET
        VERSIONED = source.VERSIONED,
        TYPE = source.TYPE,
        SOURCE = source.SOURCE,
        PRODUCT = source.PRODUCT,
        NAME = source.NAME,
        UPDATED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (IDENTIFIER, VERSIONED, TYPE, SOURCE, PRODUCT, NAME)
    VALUES (source.IDENTIFIER, source.VERSIONED, source.TYPE, 
            source.SOURCE, source.PRODUCT, source.NAME);

-- Merge agent releases data
MERGE INTO AGENT_RELEASES AS target
USING AGENT_RELEASES_STAGING AS source
ON target.IDENTIFIER = source.IDENTIFIER 
   AND target.VERSION = source.VERSION
WHEN MATCHED THEN
    UPDATE SET
        RELEASE_DATE = source.RELEASE_DATE,
        RELEASE_TYPE = source.RELEASE_TYPE,
        SUPPORT_END_DATE = source.SUPPORT_END_DATE,
        DEPRECATION_DATE = source.DEPRECATION_DATE,
        SUNSET_DATE = source.SUNSET_DATE,
        SUNSET_REASON = source.SUNSET_REASON,
        LATEST_VERSION = source.LATEST_VERSION,
        LATEST_VERSION_RELEASE_DATE = source.LATEST_VERSION_RELEASE_DATE,
        RELEASE_INFO_SUMMARY = source.RELEASE_INFO_SUMMARY,
        RELEASE_INFO = source.RELEASE_INFO,
        UPDATED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        IDENTIFIER, VERSION, RELEASE_DATE, RELEASE_TYPE,
        SUPPORT_END_DATE, DEPRECATION_DATE, SUNSET_DATE, SUNSET_REASON,
        LATEST_VERSION, LATEST_VERSION_RELEASE_DATE,
        RELEASE_INFO_SUMMARY, RELEASE_INFO
    )
    VALUES (
        source.IDENTIFIER, source.VERSION, source.RELEASE_DATE, source.RELEASE_TYPE,
        source.SUPPORT_END_DATE, source.DEPRECATION_DATE, source.SUNSET_DATE, source.SUNSET_REASON,
        source.LATEST_VERSION, source.LATEST_VERSION_RELEASE_DATE,
        source.RELEASE_INFO_SUMMARY, source.RELEASE_INFO
    );

-- Step 3: Clean up staging tables
TRUNCATE TABLE AGENTS_STAGING;
TRUNCATE TABLE AGENT_RELEASES_STAGING;

-- Useful queries to verify the data
-- Check row counts
SELECT 'AGENTS' as table_name, COUNT(*) as row_count FROM AGENTS
UNION ALL
SELECT 'AGENT_RELEASES', COUNT(*) FROM AGENT_RELEASES;

-- Check for agents without releases
SELECT a.IDENTIFIER, a.NAME, a.TYPE
FROM AGENTS a
LEFT JOIN AGENT_RELEASES ar ON a.IDENTIFIER = ar.IDENTIFIER
WHERE ar.IDENTIFIER IS NULL
ORDER BY a.TYPE, a.IDENTIFIER;

-- Check latest versions per agent
SELECT 
    a.IDENTIFIER,
    a.NAME,
    a.TYPE,
    a.PRODUCT,
    MAX(ar.VERSION) as latest_version,
    MAX(ar.RELEASE_DATE) as latest_release_date
FROM AGENTS a
JOIN AGENT_RELEASES ar ON a.IDENTIFIER = ar.IDENTIFIER
GROUP BY a.IDENTIFIER, a.NAME, a.TYPE, a.PRODUCT
ORDER BY a.TYPE, a.IDENTIFIER;